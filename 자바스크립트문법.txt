자바스크립트 문법

<윈도우키>+<.> : 이모지

외부 스크립트
<script src="/path/to/script.js"></script>

주석
//한줄	/* 여러줄 */

나머지 매개변수	... 함수 매개변수의 끝에 위치, 인수 목록의 나머지를 배열로 모음
스프레드 문법	... 함수 호출 시 사용되거나 기타 경우엔 배열을 목록으로 확장

클로저		외부 변수를 기억하고 이 외부 변수에 접근할 수 있는 함수
숨김 프로퍼티인 [[Environment]]를 이용해 자신이 어디서 만들어졌는지를 기억
함수 본문에선 [[Environment]]를 사용해 외부 변수에 접근
자바스크립트에선 실행 중인 함수, 코드 블록 {...}, 스크립트 전체는
렉시컬 환경(Lexical Environment) 이라 불리는 내부 숨김 연관 객체 두부분을 갖음
1. 환경 레코드(Environment Record)	모든 지역 변수를 프로퍼티로 저장하는 객체
2. 외부 렉시컬 환경(Outer Lexical Environment) 에 대한 참조 외부 코드와 연관
’변수’는 특수 내부 객체인 환경 레코드의 프로퍼티
'변수를 가져오거나 변경’하는 것은 '환경 레코드의 프로퍼티를 가져오거나 변경’함
전역 렉시컬 환경(global Lexical Environment	스크립트 전체 관련 렉시컬 환경

프로토타입 [[Prototype]]		숨김 프로퍼터, 객체나 null을 가리킴
obj.__proto__	프로토타입에 접근	__proto__는 [[Prototype]]의 getter·setter
for..in 반복문은 상속 프로퍼티도 순회 대상에 포함
F.prototype은 new F()를 호출할 때 만들어지는 새로운 객체의 [[Prototype]]을 설정
		값은 객체나 null만 가능 생성자 함수를 new를 사용해 호출할 때만 적용
모든 함수는 기본적으로 F.prototype = { constructor : F }를 가지고 있음
		 "constructor" 프로퍼티를 사용하면 객체의 생성자를 얻을 수 있음
모든 내장 객체의 메서드와 원시값은 프로토타입에 저장, 객체자체엔 데이터만 저장

Object.create(proto, [descriptors]) – [[Prototype]]이 proto인 객체를 만듬
		참조 값은 null일 수 있고 프로퍼티 설명자를 넘기는 것도 가능.
Object.getPrototypeOf(obj)	  	obj의 [[Prototype]]을 반환 (= __proto__ getter)
Object.setPrototypeOf(obj, proto)	obj의 [[Prototype]]을 proto로 설정(= __proto__ sette)
Object.keys(obj) / Object.values(obj) / Object.entries(obj) – obj 내 열거 가능한 
				프로퍼티 키, 값, 키-값 쌍을 담은 배열을 반환
Object.getOwnPropertySymbols(obj)	obj 내 심볼형 키를 담은 배열을 반환
Object.getOwnPropertyNames(obj)	obj 내 문자형 키를 담은 배열을 반환.
Reflect.ownKeys(obj)		obj내 키 전체를 담은 배열을 반환
obj.hasOwnProperty(key)		상속받지 않고 obj 자체에 구현된 키 중 이름이 
				key인 것이 있으면 true를 반환
모듈
모듈은 자신만의 스코프를 갖음. 모듈 간 기능 공유는 import, export
모듈 스크립트는 defer 속성처럼 항상 지연 실행
import {...} from './상대나 절대경로';	*로 한꺼번에 객체로, as로 이름 빠궈서 가져옴
export default	해당 모듈엔 개체가 하나만 있음. { }없이 import 함
export [default] class/function/variable ...	클래스,함수,변수 내보내기:
export {x [as y], ...}.			이름 없는 개체 내보내기:
다시 내보내기:
export {x [as y], ...} from "module"
export * from "module" 		(default export는 다시 내보내 지지 않음)
export {default [as y]} from "module" 	(default export를 다시 내보냄)
export default		해당 모듈엔 개체가 하나만 있음. { }없이 import 함
import(module) 표현식	모듈을 읽고 이 모듈이 내보내는 것들을 모두 포함하는 
		객체를 담은 이행된 프라미스를 반환. 호출은 어디서나 가능
import {x [as y], ...} from "mod"	named export 가져오기
import x from "mod"		default export 가져오기
import {default as x} from "mod"	default export 가져오기
import * as obj from "mod"		한 번에 가져오기
import "mod"	모듈을 가져오긴 하지만(코드는 실행됨), 변수에 할당하지 않기
import(module) 표현식은 모듈을 읽고 이 모듈이 내보내는 것들을 모두 포함하는 
객체를 담은 이행된 프라미스를 반환. 호출은 어디서나 가능

변수
var, let, const	카멜 표기법(camelCase)
var	블록 스코프가 아닌 함수 수준 스코프

전역객체
브라우저 환경: window    Node.js 환경: global    호스트 환경마다 부르는 이름은 다름

자료형
숫자형, Bigint(끝에 'n'), 불린형, 객체형, 심볼형, Bigint(정수 리터럴 끝에 n)
문자형(글자형_char X)
'[백틱] ... ${변수나 표현식} ... [백틱]'

null
'존재하지 않는(nothing)’ 값, ‘비어 있는(empty)’ 값, ‘알 수 없는(unknown)’ 값

undefined
'값이 할당되지 않은 상태’

문자형 변환 String(value)

숫자 형변환 Number(value) 수학과 관련된 함수와 표현식에서 자동
undefined	->	NaN
null		->	0
true / false	->	1 / 0
string	전달받은 문자열을 “그대로” 읽되, 처음과 끝의 공백을 무시합니다.
문자열이 비어있다면 0이 되고, 오류 발생 시 NaN이 됩니다.

불린 형변환 Boolean(value)
0, null, undefined, NaN, ""	->	false
그 외의 값		->	true

쉼표 연산자
for (a = 1, b = 3, c = a * b; a < 10; a++) {
 ...
}
표현식 각각이 모두 평가되지만, 마지막 표현식의 평가 결과만 반환

조건식
let result = condition ? value1 : value2;
condition이 truthy라면 value1이, 그렇지 않으면 value2가 반환

if (조건1) {
  조건1 true일때 실행' );
} else if (조건2) {
  조건2 true일때 실행;
} else {
  그외 실행;
}

||(OR)
인수 중 하나라도 true이면 true를 반환하고, 그렇지 않으면 false를 반환
변환 후 그 값이 true이면 연산을 멈추고 해당 피연산자의 변환 전 원래 값을 반환
모든 피연산자가 false로 평가되는 경우엔 마지막 피연산자를 반환합니다.

&&(AND)
두 피연산자가 모두가 참일 때 true를 반환합니다. 그 외의 경우는 false를 반환
변환 후 값이 false이면 평가를 멈추고 해당 피연산자의 변환 전 원래 값을 반환
모든 피연산자가 true로 평가되는 경우엔 마지막 피연산자가 반환

!(NOT)
피연산자를 불린형(true / false)으로 변환후 그 값의 역을 반환

nullish 병합 연산자 '??'
여러 피연산자 중 그 값이 ‘확정되어있는’ 변수를 찾음
x = a ?? b
x = (a !== null && a !== undefined) ? a : b;
a가 null도 아니고 undefined도 아니면 a 그 외의 경우는 b
||는 첫 번째 truthy 값을 반환.
??는 첫 번째 정의된(defined) 값을 반환

반복문
while (condition) {
  // condition(조건)이 truthy 이면 코드가 실행
}

do {
  // 본문이 먼저 실행되고, 조건을 확인한 후 조건이 truthy인 동안엔 본문이 계속 실행
} while (condition);

for (begin; condition; step) {
  // ... 반복문 본문 ...
}
continue는 현재 반복을 종료시키고 다음 반복으로 넘어가고 싶을 때
레이블(label) 은 반복문 앞에 콜론과 함께 쓰이는 식별자
break <labelName>문을 사용하면 레이블에 해당하는 중첩 반복문을 빠져나옴
break와 continue는 반복문 안에서만 사용할 수 있고,
레이블은 반드시 break이나 continue 지시자 위에 있어야 함

‘for…in’ 반복문
for (key in object) {
  // 각 프로퍼티 키(key)를 이용하여 본문(body)을 실행합니다.
}

‘for…of’ 반복문
for (key of object) {
  // [Symbol.iterator] 속성을 가지는 컬렉션 전용
}

<ex>소수 출력하기
let n = 10;
nextPrime:
for (let i = 2; i <= n; i++) { // 각 i에 대하여 반복문을 돌림
  for (let j = 2; j < i; j++) { // 제수(나눗수)를 찾음
    if (i % j == 0) continue nextPrime; // 소수가 아니므로 다음 i로 넘어감
  }
  alert( i ); // 소수
}

switch문
switch(x) {
  case 'value1':  // if (x === 'value1')
    ...
    [break] //break문이 없으면 switch문 끝까지 실행

  case 'value2':  // if (x === 'value2')
    ...
    [break]

  default:
    ... //생략가능
    [break]
}

‘try…catch’ 문
try {
  // 이곳의 코드를 실행
} catch(err) {
  // 에러가 발생하면, 여기부터 실행됨 throw err;
} finally {
  // 에러 발생 여부와 상관없이 try/catch 이후에 실행됨
}
커스텀 클래스는 Error나 다른 내장 에러 클래스를 상속 super호출, name 프로퍼터사용
instanceof 사용하여 에러 종류를 판별

전역 catch
window.onerror = function(message, url, line, col, error) {
  // ...브라우저 환경  Node.js의 process.on("uncaughtException") 등
};
message	에러메 시지	url:  에러가 발생한 스크립트의 URL
line, col:  에러가 발생한 곳의 줄과 열 번호	error:  에러 객체

객체	키를 사용해 식별할 수 있는 값을 담은 컬렉션
let user = new Object( );	 // '객체 생성자' 문법
let user = { };  		// '객체 리터럴' 문법
중괄호 {...} 안에는 ‘키: 값’ 쌍으로 구성된 프로퍼티
키는 문자형과 심볼형만 가능

함수선언
function name(parameter1, 매개변수2, ... parameterN) {
  // 함수 본문
}
코드 블록이 실행되기도 전에 처리

함수 표현
let name = function(parameter) {
  // 함수 본문
};
실제 실행 흐름이 해당 함수에 도달했을 때 함수를 생성

new Function 문법
let func = new Function ([arg1, arg2, ...argN], functionBody);
[[Environment]]는 전역 렉시컬 환경을 참조하므로 외부 변수를 사용할 수 없음

함수호출
name( ) name(인수) name(인수X:undefined)
매개변수에 값을 전달하지 않아도 그 값이 undefined가 되지 않게 하려면
함수를 선언할 때 =를 사용해 '기본값(default value)'을 설정
if (매개변수 === undefined) 매개변수 = '기본값';
text = text || '빈 문자열';

반환 값(return value) return (여러줄)
return문이 없거나 return 지시자만 있는 함수는 undefined를 반환

<ex>소수 출력함수1
function showPrimes(n) {
  nextPrime: for (let i = 2; i < n; i++) {
    for (let j = 2; j < i; j++) {
      if (i % j == 0) continue nextPrime;
    }
    alert(i); // 소수
  }
}

<ex>소수 출력함수2
function showPrimes(n) {
  for (let i = 2; i < n; i++) {
    if (!isPrime(i)) continue;
    alert(i);  // a prime
  }
}
function isPrime(n) {
  for (let i = 2; i < n; i++) {
    if ( n % i == 0) return false;
  }
  return true;
}

<ex>콜백함수
function ask(question, yes, no) {
  if (confirm(question)) yes()
  else no();
}
ask(
  "동의하십니까?",
  function( ) { alert("동의하셨습니다."); },
  function( ) { alert("취소 버튼을 누르셨습니다."); }
);

기명 함수 표현식(Named Function Expression, NFE)
이름을 사용해 함수 표현식 내부에서 자기 자신을 참조 가능
기명 함수 표현식 외부에선 그 이름을 사용할 수 없음

setInterval(func, delay, ...args)		setTimeout(func, delay, ...args)
delay밀리초 후에 func을 규칙적으로, 또는 한번 실행
setTimeout, clearInterval	 '타이머 식별자(timer identifier)'가 반환
<ex>
let timerId = setTimeout(func|code, [delay], [arg1], [arg2], ...)
let timerId = setTimeout(...);
clearTimeout(timerId);

데코레이터(decorator)
인수로 받은 함수의 행동을 변경
func.call(context, arg1, arg2, ...)	this를 명시적으로 고정해 함수를 호출
메서드의 첫 번째 인수가 this, 이어지는 인수가 func의 인수가 된 후, func이 호출
func.apply(context, args)	this를 context로 고정, 유사 배열 객체인 args를 인수
func.bind(context, ...args)	this가 context로 고정, 인수도 고정된 함수 func을 반환
<ex> 인수 일부는 고정하고 컨텍스트 this 고정하지 않기
function partial(func, ...argsBound) {
  return function(...args) { // (*)
    return func.call(this, ...argsBound, ...args);
  }
}

화살표 함수    this는 외부값 가져옴, arguments없음, super없음 new와 함께 호출X
let func = (arg1, 인자2, ...argN) => expression
<or>
let func = function(arg1, arg2, ...argN) {
  return 표현식;
};

<ex> this 값과 arguments 정보를 함께 실어 호출을 포워딩해 주는 데코레이터
function defer(f, ms) {
  return function() {
    setTimeout(() => f.apply(this, arguments), ms)
  };
}
function sayHi(who) {
  alert('안녕, ' + who);
}
let sayHiDeferred = defer(sayHi, 2000);
sayHiDeferred("철수"); // 2초 후 "안녕, 철수"가 출력됩니다.
<ex> 동일한 기능을 하는 데코레이터 함수
function defer(f, ms) {
  return function(...args) {
    let ctx = this;
    setTimeout(function() {
      return f.apply(ctx, args);
    }, ms);
  };
}

프로퍼터 접근
점 표기법: obj.property
대괄호 표기법: obj["property"]
obj[varWithKey] 변수에서 키를 가져옴

delete obj.prop	프로퍼티를 삭제
"key" in obj	해당 key를 가진 프로퍼티가 객체 내에 있는지 확인
for (let key in obj)	프로퍼티를 나열

계산된 프로퍼티
객체 리터럴 안의 프로퍼티 키가 대괄호로 둘러싸인 표현식

단축 프로퍼티
property. // property: property 과 같음

.name	함수의 이름이 저장
.length	함수 선언부에 있는 인수의 수로 나머지 매개변수는 포함되지 않음
커스텀 프로퍼티	자체적으로 만든 프로퍼티를 추가 가능

프로퍼티 getter와 setter		접근자 프로퍼티(accessor property
객체 리터럴 안에서 getter와 setter 메서드는 get과 set으로 나타낼 수 있음
ge		인수가 없는 함수로, 프로퍼티를 읽을 때 동작함
set		인수가 하나인 함수로, 프로퍼티에 값을 쓸 때 호출됨
enumerable	데이터 프로퍼티와 동일함
configurable	데이터 프로퍼티와 동일함

프로퍼티 플래그
writable – true이면 값을 수정 가능 or 읽기만 가능
enumerable – true이면 반복문을 사용해 나열 가능 or 불가능
configurable – true이면 프로퍼티 삭제나 플래그 수정이 가능 or 삭제와  수정이 불가능

let descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);
obj  정보를 얻고자 하는 객체	propertyName  정보를 얻고자 하는 객체 내 프로퍼티
"프로퍼티 설명자(descriptor)" 객체 반환 	프로퍼티에 대한 모든 정보

Object.defineProperty(obj, propertyName, descriptor)
obj, propertyName  적용할 객체와 객체 프로퍼티  descriptor	  적용할 설명자
값을 명시하지 않으면 플래그 값이 자동으로 false

Object.defineProperties(obj, {		프로퍼티 여러 개를 한 번에 정의
  prop1: descriptor1,
  prop2: descriptor2
  // ...
});

Object.getOwnPropertyDescriptors(obj)	심볼형 포함 프로퍼티 설명자 전체 반환
let clone = Object.defineProperties({}, Object.getOwnPropertyDescriptors(obj));
객체 복사 시 플래그도 함께 복사

객체 복사
let clone = { }; // 새로운 빈 객체
// 빈 객체에 user 프로퍼티 전부를 복사해 넣습니다.
for (let key in user) {
  clone[key] = user[key];
}
<or>
Object.assign(dest, [src1, src2, src3...])
객체 src1, ..., srcN의 프로퍼티를 dest에 복사

중첩 객체 복사(dep cloning)
lodash의  _.cloneDeep(obj) 메서드 사용

메서드(method) 
객체 프로퍼티에 할당된 함수
객체명.함수명();
this 로 객체에 접근, 없으면 undefined
화살표 함수는 외부함수에서 가져옴

메서드 단축 구문
객체명 = {
  메서드명() { // "메서드명: function()"과 동일
  }
};

객체명.함수명1();
객체명.함수명2();
<or> 체이닝
객체명.함수명1()함수명2();

생성자 함수(constructor function)
유사한 객체를 여러게 만들떄 사용
첫 글자는 대문자로 시작
'new' 연산자를 붙여 실행
this에 저장되고 반환
객체를 return 한다면 this대신 객체 반환
원시형 return은 무시

<ex>
function User(name) {
  this.name = 이름;
  this.isAdmin = false;
}
let user = new User("보라");

익명 생성자 함수(재사용X)
let user = new function() {
  this.name = "John"
};

옵셔널 체이닝 '?.'
프로퍼티가 없는 중첩 객체를 에러 없이 안전하게 접근
?.'앞’의 평가 대상이 undefined나 null이면 평가를 멈추고 undefined를 반환

심볼(symbol)
유일한 식별자(unique identifier)를 만들고 싶을 때 사용
let 심볼명 = Symbol("심볼이름(설명)");
Symbol.for(key)	 key라는 이름을 가진 전역 심볼을 반환
Symbol.*		 시스템 심볼 접근

객체-원시형 형변환
obj[Symbol.toPrimitive] = function(hint) {
  // 반드시 원시값을 반환해야 함
  // hint는 "string", "number", "default" 중 하나가 될 수 있음
};
"string" (alert 같이 문자열을 필요로 하는 연산)
"number" (수학 연산)
"default" (드물게 발생함)
obj[Symbol.toPrimitive](hint)메서드
else> obj.toString( )이나 obj.valueOf( )를 호출
else> obj.valueOf( )나 obj.toString( )을 호출

클래스
class MyClass <extend 상속클래스or표현식> {
  prop = value; 		// 프로퍼티	//클래스필드
  constructor(...) { 		// 생성자 메서드 new에 의해 자동 호출
    // ...
  }
  method(...) {} 		// 메서드
  get something(...) {} 	// getter 메서드
  set something(...) {} 	// setter 메서드
  [Symbol.iterator]() {}	// 계산된 이름을 사용해 만드는 메서드 (심볼)
  // ...
}
[[IsClassConstructor]]: true	new와 함께 호출 필요
enumerable 플래그는 false	메서드 열거 불가
super.method(...)	부모 클래스에 정의된 메서드, method를 호출
super(...)		부모 생성자를 호출, 자식 생성자 내부에서만 this사용전 호출
정적(static) 메서드, 프로퍼터
"prototype"이 아닌 클래스 함수 자체에 메서드를 설정
private 필드는 #로 시작 자바스크립트에서 	지원 클래스 내부에서 접근
protected 필드는 _로 시작 관습 		상속받는 클래스에서 접근
obj instanceof Class	obj가 Class나 상속받는 클래스에 속하면 true가 반환

<ex 이벤트 믹스인>
let eventMixin = {
  /**  이벤트 구독
   *  사용패턴: menu.on('select', function(item) { ... }   */
  on(eventName, handler) {
    if (!this._eventHandlers) this._eventHandlers = {};
    if (!this._eventHandlers[eventName]) {
      this._eventHandlers[eventName] = [];
    }
    this._eventHandlers[eventName].push(handler);
  },
  /*구독 취소
   *  사용패턴: menu.off('select', handler) */
  off(eventName, handler) {
    let handlers = this._eventHandlers?.[eventName];
    if (!handlers) return;
    for (let i = 0; i < handlers.length; i++) {
      if (handlers[i] === handler) {
        handlers.splice(i--, 1);
      }
    }
  },
  /** 주어진 이름과 데이터를 기반으로 이벤트 생성
   *  사용패턴: this.trigger('select', data1, data2); */
  trigger(eventName, ...args) {
    if (!this._eventHandlers?.[eventName]) {
      return; // no handlers for that event name
    }
    // 핸들러 호출
    this._eventHandlers[eventName].forEach(handler => handler.apply(this, args));
  }
};
// 사용법 	클래스 생성	
class Menu {
  choose(value) {
    this.trigger("select", value);
  }
}
// 이벤트 관련 메서드가 구현된 믹스인 추가
Object.assign(Menu.prototype, eventMixin);
let menu = new Menu();
// 메뉴 항목을 선택할 때 호출될 핸들러 추가
menu.on("select", value => alert(`선택된 값: ${value}`));
// 이벤트가 트리거 되면 핸들러가 실행되어 얼럿창이 뜸
// 얼럿창 메시지: Value selected: 123
menu.choose("123");

프라미스
let promise = new Promise(function(resolve, reject) {
  // executor (제작 코드, '가수')
});
resolve(value) 	일이 성공적으로 끝난 경우 그 결과를 나타내는 value와 함께 호출
reject(error)	에러 발생 시 에러 객체를 나타내는 error와 함께 호출

new Promise(executor)	state: "pending" 	result: undefined
value를 반환하면		state: "fulfilled"	result: value
에러를 던지면		state: "rejected"	result: error
프라미스 객체를 반환하면	새로운 프라미스의 result값

프라미스 소비자: then, catch, finally(항상실행=then(f,f))
promise.then(
  function(result) { /* 결과(result)를 다룹니다 */ },
  function(error) { /* 에러(error)를 다룹니다 */ }
);
성공만 다룰땐 인수 하나만 전달	에러만 다룰땐 첫인수 null (=.catch)

프라미스 체이닝 비동기 처리
new Promise(function(resolve, reject) {
  setTimeout(() => resolve(1), 1000); 	// (*)
}).then(function(result) {		// (**)
  alert(result);			// 1
  return result 			* 2;
});
<ex>
loadScript("/article/promise-chaining/one.js")
  .then(script => loadScript("/article/promise-chaining/two.js"))
  .then(script => loadScript("/article/promise-chaining/three.js"))
  .then(script => {
    // 스크립트를 정상적으로 불러왔기 때문에 스크립트 내의 함수를 호출가능
    one();
    two();
    three();
  });
.then 또는 .catch, .finally의 핸들러(어떤 경우도 상관없음)가 프라미스를 반환하면,
나머지 체인은 프라미스가 처리될 때까지 대기 처리가 완료되면 프라미스의
result(값 또는 에러)가 다음 체인으로 전달

프라미스 정적 메서드
Promise.all(promises)    	모든 프라미스 이행(실패X) 후 결과(객체)를 담은 배열을 반환
Promise.allSettled(promises)	모든 프라미스 처리 후 결과(객체)를 담은 배열을 반환
Promise.race(promises) 	가장 먼저 처리된 결과를 담은 프라미스를 반환
Promise.resolve(value)	주어진 값을 사용해 이행 상태의 프라미스를 만듬.
Promise.reject(error)	주어진 에러를 사용해 거부 상태의 프라미스를 만듬.

프라미스화(promisification)	콜백을 받는 함수를 프라미스를 반환하는 함수로 바꿈
<ex> 콜백의 성공 결과를 담은 배열을 얻게 해주는 promisify(f, true)
function promisify(f, manyArgs = false) {
  return function (...args) {
    return new Promise((resolve, reject) => {
      function callback(err, ...results) { // f에 사용할 커스텀 콜백
        if (err) {
          reject(err);
        } else {
          // manyArgs가 구체적으로 명시되었다면, 콜백의 성공 케이스와 함께 이행
          resolve(manyArgs ? results : results[0]);
        }
      }
      args.push(callback);
      f.call(this, ...args);
    });
  };
};

// 사용법:
f = promisify(f, true);
f(...).then(arrayOfResults => ..., err => ...)

async	function 앞에 async를 붙이면 해당 함수는 항상 프라미스를 반환
await	자바스크립트는 await 키워드를 만나면 프라미스가 처리될 때까지 기다림
에러 발생		예외가 생성(에러가 발생한 장소에서 throw error 호출과 동일
에러 미발생	프라미스 객체의 result 값을 반환
promise.then/catch	가장 바깥 스코프에서 비동기 처리 필요할떄 사용

제너레이터
function* f(…) {…}
yield 		연산자는 제너레이터 안에 있어야 함.
next/yield 	호출을 사용하면 외부 코드와 제너레이터 간에 결과를 교환

		iterable			async iterable
iterator반환 메서드	Symbol.iterator		Symbol.asyncIterator
next( ) 반환 값	{value:…, done: true/false} 	{value...}를 감싸는 Promise

		generators		async generator
선언		function*			async function*
next( ) 반환 값	{value:…, done: true/false}	{value...}를 감싸는 Promise

배열 	순서가 있는 컬렉션을 저장할 때 쓰는 자료구조
배열선언 
let arr = new Array( );
let arr = [ ];
.length		배열의 길이(숫자형 인덱스 중 가장 큰 값에 1을 더한 값)
push(...items)	items를 배열 끝에 더해줌다.
pop( ) 		배열 끝 요소를 제거하고, 제거한 요소를 반환합니다.
shift( )		배열 처음 요소를 제거하고, 제거한 요소를 반환합니다.
unshift(...items)	items를 배열 처음에 더해줍니다.
splice(pos, delCount, ...items)  pos부터 delCount개의 요소를 지우고, items 추가하기
slice(start, end)	start부터 end 바로 앞까지의 요소를 복사해 새로운 배열을 만듦
concat(...items) 	배열의 모든 요소를 복사하고 items를 추가해 새로운 배열을
	만든 후 이를 반환함. items가 배열이면 이 배열의 인수를 기존 배열에 더해줌
indexOf / lastIndexOf(item, pos)		pos부터 원하는 item을 찾음. 
			찾게 되면 해당 요소의 인덱스를, 아니면 -1을 반환함
includes(value) 	배열에 value가 있으면 true를, 그렇지 않으면 false를 반환함
find/filter(func) 	func의 반환 값을 true로 만드는 첫 번째/전체 요소를 반환함
findIndex 	find와 유사함. 다만 요소 대신 인덱스를 반환함
forEach(func)	모든 요소에 func을 호출함. 결과는 반환되지 않음
map(func)	모든 요소에 func을 호출하고, 반환된 결과로 새로운 배열을 만듦
sort(func) 	배열을 정렬하고 정렬된 배열을 반환함
reverse( ) 	배열을 뒤집어 반환함
split/join 	문자열을 배열로, 배열을 문자열로 변환함
reduce(func, initial)     요소를 차례로 돌면서 func을 호출함. 반환값은 다음 함수 
		호출에 전달함. 최종적으로 하나의 값이 도출됨
Array.isArray(arr) 	arr이 배열인지 여부를 판단함
arr.some(fn)	함수의 반환 값을 true로 만드는 요소가 하나라도 있는지 여부를 확인
arr.every(fn)	모든 요소가 함수의 반환 값을 true로 만드는지 여부를 확인
arr.fill(value, start, end)	start부터 end까지 value를 채워 넣음
arr.copyWithin(target, start, end)     start부터 end까지 요소를 복사하고 target에 덮어씀
for (let i=0; i<arr.length; i++)	가장 빠른 방법이고 오래된 브라우저와도 호환
for (let item of arr) 		배열 요소에만 사용되는 모던한 문법 (인덱스X 값만)
for (let i in arr)		키가 숫자가 아니라도 가고 느림 객체에 사용

이터러블
for..of을 사용할 수 있는 객체
이터레이터 obj[Symbol.iterator] 	 반드시 구현
메서드 next( ) 	객체 {done: Boolean, value: any} 반드시 반환
done : true은 반복이 끝났음을 의미, 그렇지 않은 경우엔 value
유사 배열		인덱스와 length 프로퍼티가 있는 객체
Array.from(obj[, mapFn, thisArg]) 이터러블이나 유사 배열인 obj를 진짜 Array로 만듬

맵(Map) 	키가 있는 값이 저장된 컬렉션. 객체와 달리 맵은 키에 다양한 자료형을 허용
new Map([iterable])	 맵을 만듬. [key,value]쌍이 있는 iterable(예: 배열)을 
		선택적으로 넘길 수 있는데, 이때 넘긴 이터러블 객체는 맵 초기화에 사용.
map.set(key, value)	키를 이용해 값을 저장
map.get(key)	키에 해당하는 값을 반환. key가 존재하지 않으면 undefined를 반환
map.has(key)	키가 있으면 true, 없으면 false를 반환 
map.delete(key)	키에 해당하는 값을 삭제 
map.clear( )	맵 안의 모든 요소를 제거 
map.size		요소의 개수를 반환

셋		중복이 없는 값을 저장할 때 쓰이는 컬렉션
new Set([iterable])	셋을 만듬. iterable 객체를 선택적으로 전달받을 수 있는데
	(대개 배열을 전달받음), 이터러블 객체 안의 요소는 셋을 초기화하는데 쓰임
set.add(value)	값을 추가하고 셋 자신을 반환. 이미 value가 있는 경우 동작X
set.delete(value) 	값을 제거합니다. 제거에 성공하면 true, 아니면 false를 반환
set.has(value) 	셋 내에 값이 존재하면 true, 아니면 false를 반환 
set.clear( )		셋을 비움
set.size 		셋에 몇 개의 값이 있는지 카운트

위크맵 (WeakMap)
키가 반드시 객체, 반복 작업과 keys(), values(), entries() 메서드를 지원하지 않는다
weakMap.get(key)
weakMap.set(key, value)
weakMap.delete(key)
weakMap.has(key)

위크셋 (WeakSet)
객체만 저장할 수 있다
add, has, delete를 사용할 수 있고, size, keys()나 반복 작업 관련 메서드는 사용할 수 없다

순회(iteration)	
일반객체
Object.keys(obj)	객체의 키만 담은 배열을 반환 
Object.values(obj)	객체의 값만 담은 배열을 반환 
Object.entries(obj)	[키, 값] 쌍을 담은 배열을 반환
Map, Set, Array 
map.keys( )	iterable 객체 반환
	
객체에 배열 전용 메서드 사용하기
Object.entries(obj)	객체의 키-값 쌍이 요소인 배열을 얻음
만든 배열에 map 등의 배열 전용 메서드를 적용.
반환된 배열에 Object.fromEntries(array)를 적용해 배열을 다시 객체로 되돌림
Object.assign( ) 	1차원 배열을 객체로 변환	

구조 분해 할당		객체나 배열을 변수로 연결
let {prop : varName = default, ...rest} = object		객체분해
object의 프로퍼티 prop의 값은 변수 varName에 할당없으면 default가 할당
연결할 변수가 없는 나머지 프로퍼티들은 객체 rest에 복사

let [item1 = default, item2, ...rest] = array		배열분해
array의 첫 번째 요소는 item1에, 두 번째 요소는 변수 item2에 할당,
이어지는 나머지 요소들은 배열 rest에 복사

Date 객체와 날짜
new Date()	인수 없이 호출하면 현재 날짜와 시간이 저장된 Date 객체가 반환
new Date(milliseconds)	UTC 기준(UTC+0) 1970년 1월 1일 0시 0분 0초에서 
		milliseconds 밀리초(1/1000 초) 후의 시점이 저장된 Date 객체 반환
new Date(datestring)  인수가 하나인데, 문자열이라면 해당 문자열은 자동으로 구문 분석
new Date(year, month, date, hours, minutes, seconds, ms)
		주어진 인수를 조합해 만들 수 있는 날짜가 저장된 객체가 반환
year		반드시 네 자리 숫자
month		0(1월)부터 11(12월) 사이의 숫자
date		값이 없는 경우엔 1일로 처리
hours/minutes/seconds/ms에 값이 없는 경우엔 0으로 처리
getFullYear( )	연도(네 자릿수)를 반환 
getMonth( )	월을 반환합니다(0 이상 11 이하).
getDate( )		일을 반환합니다(1 이상 31 이하)
getHours( ), getMinutes( ), getSeconds( ), getMilliseconds( )
시, 분, 초, 밀리초를 반환합니다.
getDay( )		일요일:0 부터 토요일:6 까지의 숫자 중 하나를 반환
getTime( )		주어진 일시와 1970년 1월 1일 00시 00분 00초 사이의 간격
		(밀리초 단위)인 타임스탬프를 반환, Date객체 숫자형 변경시 반환
getTimezoneOffset( )	현지 시간과 표준 시간의 차이(분)를 반환
setTime( )을 제외한 모든 메서드는 setUTCHours()같이 표준시에 구성 요소를 설정
Date.now( ) 	현재 타임스탬프를 반환, Date 객체를 만들지 않는다
Date.parse(str)	문자열(YYYY-MM-DDTHH:mm:ss.sssZ)에서 날짜를 읽어옴

JSON과 메서드
JSON.stringify(객체)		객체를 JSON으로 바꿔줌.
let json = JSON.stringify(value[, replacer, space])
value: 	인코딩 하려는 값
replacer: 	프로퍼티가 담긴 배열. 또는 매핑 함수 function(key, value)
space: 	서식 변경 목적으로 사용할 공백 문자 수
JSON.stringify는 객체에 toJSON 메서드가 있으면 이를 자동으로 호출

JSON.parse		JSON으로 인코딩된 객체를 다시 객체로 디코딩
let value = JSON.parse(str, [reviver]);
str:	JSON 형식의 문자열
reviver:	모든 (key, value) 쌍을 대상으로 호출되는 function(key,value) 형태의 함수

숫자형
0의 개수를 'e'뒤에 추가 소수는 음수
16진수(0x), 8진수(0o), 2진수(0b)
parseInt(str, base)	str을 base진수로 바꿈
num.toString(base)	base진법으로 num을 표현한 후, 이를 문자형으로 변환
parseInt/parseFloat	문자열에서 숫자만 읽고, 읽은 숫자를 에러가 발생하기 전에 반환
parseInt(str, radix)	정수 반환, 두번째 인수는 진수
parseFloat		부동 소수점 숫자
Math.floor		소수점 첫째 자리에서 내림(버림)
Math.ceil			소수점 첫째 자리에서 올림
Math.trunc		소수부를 무시
Math.round		소수점 첫째 자리에서 반올림
Math.random( )		0과 1 사이의 난수를 반환합니다(1은 제외)
num.toFixed(n)		소수점 n번째 까지 어림수를 문자형 반환
isNaN(value) 		인수를 숫자로 변환한 다음 NaN인지 테스트
isFinite(value) 	인수를 숫자로 변환하고 변환한 숫자가 NaN/Infinity/-Infinity가 아닌
		일반 숫자인 경우 true를 반환 // 숫자인지 검증하는데 사용

문자열
[pos] <or> str.charAt(pos)	문자열 내 pos위치 접근
백틱 문자열 중간에 ${…}을 사용해 표현식 가능
func`string` 템플릿 함수(백틱 안을 인수로 받아 자동으로 func 호출)
str.trim() – 문자열 앞과 끝의 공백 문자를 다듬어 줍니다(제거함).
str.repeat(n) – 문자열을 n번 반복
length 프로퍼티엔 문자열의 길이
toLowerCase( )		대문자를 소문자로 변경
toUpperCase( )		소문자를 대문자로 변경
str.indexOf(substr, pos)	문자열 str의 pos에서부터 시작해,          (앞부터)
str.lastIndexOf(substr, position)부분 문자열 substr이 어디에 위치하는지 (뒤부터)
str.includes(substr, pos)	str에 문자열 substr이 있는지에 따라 true나 false를 반환
str.slice(start [, end])		문자열의 start부터 end까지(end는 미포함)를 반환
str.substring(start [, end])	start와 end 사이에 있는 문자열을 반환
str.substr(start [, length])	start에서부터 시작해 length 개의 글자를 반환
str.codePointAt(pos)		pos에 위치한 글자의 코드를 반환
String.fromCodePoint(code)	숫자 형식의 code에 대응하는 글자를 만듬
str.localeCompare(str2)	 ECMA-402에 따라 str - str2 나타내는 정수 반환

Proxy
let proxy = new Proxy(target, handler)
target	감싸게 될 객체로, 함수를 포함한 모든 객체가 가능
handler	동작을 가로채는 메서드인 '트랩(trap)'이 담긴 객체, 여기서 프락시를 설정
proxy에 작업이 가해지고, handler에 작업과 상응하는 트랩이 있으면 트랩이 실행되어
프락시가 이 작업을 처리할 기회를 얻게 됩, 트랩이 없으면 target에 작업이 직접 수행
내부 메서드		핸들러 메서드		작동 시점
[[Get]]			get			프로퍼티를 읽을 때
[[Set]]			set			프로퍼티에 쓸 때
[[HasProperty]]		has			in 연산자가 동작할 때
[[Delete]]			deleteProperty		delete 연산자가 동작할 때
[[Call]]			apply			함수를 호출할 때
[[Construct]]		construct	new 		연산자가 동작할 때
[[GetPrototypeOf]]		getPrototypeOf		Object.getPrototypeOf
[[SetPrototypeOf]]		setPrototypeOf		Object.setPrototypeOf
[[IsExtensible]]		isExtensible		Object.isExtensible
[[PreventExtensions]]	preventExtensions		Object.preventExtensions
[[DefineOwnProperty]]	defineProperty		Object.defineProperty, 
						Object.defineProperties
[[GetOwnProperty]]		getOwnPropertyDescriptor	Object.getOwnProperty\
				\\Descriptor, for..in, Object.keys/values/entries
[[OwnPropertyKeys]]		ownKeys			Object.getOwnProperty\
	\\Names, Object.getOwnPropertySymbols, for..in, Object/keys/values/entries
Reflect
Operation		Reflect call			Internal method
obj[prop]		Reflect.get(obj, prop)		[[Get]]
obj[prop] = value	Reflect.set(obj, prop, value)		[[Set]]
delete obj[prop]	Reflect.deleteProperty(obj, prop)	[[Delete]]
new F(value)	Reflect.construct(F, value)		[[Construct]]

eval(code)	  호출하면 문자열 형태의 code가 실행되는데 이때 마지막 구문의 결과가 반환

커링	f(a,b,c)를 f(a)(b)(c) 와 같이 다중 callable 프로세스 형태로 변환
	만약에 인수들이 충분하지 않을 때에는 partial을 반환
<ex1>
function curry(f) { // 커링 변환을 하는 curry(f) 함수
  return function(a) {
    return function(b) {
      return f(a, b);
    };
  };
}
// usage
function sum(a, b) {
  return a + b;
}
let curriedSum = curry(sum);
alert( curriedSum(1)(2) ); // 3

다중-인수를 허용 커리
function curry(func) {
  return function curried(...args) {
    if (args.length >= func.length) {
      return func.apply(this, args);
    } else {
      return function(...args2) {
        return curried.apply(this, args.concat(args2));
      }
    }
  };
}
<ex>
function sum(a, b, c) {
  return a + b + c;
}
let curriedSum = curry(sum);
alert( curriedSum(1, 2, 3) ); // 6, 보통때 처럼 단일 callable 형식으로 호출하기
alert( curriedSum(1)(2,3) ); // 6, 첫 번째 인수를 커링하기
alert( curriedSum(1)(2)(3) ); // 6, 모두 커링하기

브라우저: 문서, 이벤트, 인터페이스
DOM 트리 상단의 노드들은 document가 제공하는 프로퍼티를 사용해 접근
<html> = document.documentElement
<body> = document.body
<head> = document.head
			document
		document.documentElement	<HTML>
			document.body		`(if inside body)
			parentNode
	previousSibling	<- DIV ->	nextSibling
	firstChild		childNodes	lastChild

childNodes 이터러블 컬렉션은 텍스트 노드를 포함한 모든 자식 노드 (firstChild와 lastChild)
Symbol.iterator 프로퍼티가 구현되어 있어서 for..of를 사용가능하나
배열이 아니라 배열 매서드 불가 (Array.from을 사용)
children 					해당 요소의 자식 노드 중 요소 노드
firstElementChild				첫 번째 자식 요소 노드
lastElementChild				마지막 자식 요소 노드
previousElementSibling  nextElementSibling	형제 요소 노드
parentElement 				부모 요소 노드

노드검색메서드		검색 기준	호출 대상	컬렉션 갱신
querySelector		CSS 선택자	O		X
querySelectorAll		CSS 선택자	O		X
getElementById		id		X		X
getElementsByName	name		X		O
getElementsByTagName	태그나 '*'	O		O
getElementsByClassName	class		O		O
elem.matches(css)		elem이 해당 CSS 선택자와 일치하는지 여부를 검사.
elem.closest(css)		해당 CSS 선택자와 일치하는 가장 가까운 조상 요소를 탐색
elemA.contains(elemB)	elemB가 elemA의 후손이거나 elemA==elemB일 때, 참 반환

HTMLInputElement	입력 관련 프로퍼티를 제공하는 클래스
HTMLElement		HTML 요소 메서드와 getter, setter를 제공하는 클래스
Element			요소 노드 메서드를 제공하는 클래스
Node			공통 DOM 노드 프로퍼티를 제공하는 클래스
EventTarget		이벤트 관련 기능을 제공하는 클래스
Object			hasOwnProperty같이 ‘일반 객체’ 메서드를 제공하는 클래스

odeType 		요소 노드라면 1을, 텍스트 노드라면 3을 반환 읽기 전용
nodeName/tagName	요소 노드의 태그 이름을 알아냄 (XML제외) 대문자로 변환 읽기 전용
innerHTML		요소 안의 HTML을 수정
outerHTML		요소의 전체 HTML을 알아냄
nodeValue/data		요소가 아닌 노드(텍스트, 주석 노드 등)의 내용을 읽을 때
textContent		HTML에서 모든 <태그>를 제외한 텍스트만 읽을 때 사용
hidden			true로 설정하면 CSS(display:none)과 동일하게 동작
노드 생성 메서드:
document.createElement(tag) 	태그 이름을 사용해 새로운 요소를 만듦
document.createTextNode(value)	텍스트 노드를 만듦(잘 쓰이지 않음)
elem.cloneNode(deep)		요소를 복제함. deep==true일 경우 모든 자손 요소도 복제
노드 삽입, 삭제 메서드:
node.append(노드나 문자열)	node 끝에 노드를 삽입
node.prepend(노드나 문자열)	node 맨 앞에 노드를 삽입
node.before(노드나 문자열)		node 이전에 노드를 삽입
node.after(노드나 문자열)		node 다음에 노드를 삽입
node.replaceWith(노드나 문자열)	node를 대체
node.remove()		node를 제거 문자열을 삽입, 삭제할 땐 문자열을 ‘그대로’ 넣으면 됨.
‘구식’ 메서드:
parent.appendChild(node)			node를 반환
parent.insertBefore(node, nextSibling)	node를 반환.
parent.removeChild(node)			node를 반환.
parent.replaceChild(newElem, node)		node를 반환.

elem.insertAdjacentHTML(where, html)	 where 값에 따라 특정 위치에 HTML을 삽입함
"beforebegin"	elem 바로 앞에 html을 삽입
"afterbegin" 	elem의 첫 번째 자식 요소 바로 앞에 html을 삽입
"beforeend"	elem의 마지막 자식 요소 바로 다음에 html을 삽입
"afterend"	elem 바로 다음에 html을 삽입
elem.insertAdjacentText와 elem.insertAdjacentElement	문자열이나 요소 삽입에 쓰이는 유사 메서드
document.write(html)	페이지 로딩이 끝나기 전에 HTML을 삽입해주는 메서드
클래스를 관리 DOM 프로퍼티
className	클래스 전체를 문자열 형태로 반환.
classLis		클래스 하나의 add/remove/toggle/contains가 구현된 객체를 반환.
style 프로퍼티		카멜 표기법을 이용해 변경한 스타일이 있는 객체
style.cssText 프로퍼티	 "style" 속성 전체에 대응하므로 스타일 전체에 대한 문자열이 저장
getComputedStyle(elem, [pseudo])	스타일 정보가 들어 있는 객체를 반환
요소 기하 프로퍼터
offsetParent	위치 계산에 사용되는 가장 가까운 조상 요소나 td, th, table, body
offsetLeft와 offsetTop	offsetParent 기준으로 요소가 얼마나 떨어져 있는지를 나타내는 값
offsetWidth와 offsetHeight	테두리를 포함 요소 '전체’가 차지하는 너비와 높이
clientLeft와 clientTop	요소 제일 밖을 감싸는 영역과 요소 안(콘텐츠 + 패딩)을 감싸는 영역 
	사이의 거리를 나타냄. 대부분의 경우 왼쪽, 위쪽 테두리 두께와 일치하지만, 오른쪽에서
	왼쪽으로 글을 쓰는 언어가 세팅된 OS에선 clientLeft에 스크롤바 두께가 포함됨
clientWidth와 clientHeight	콘텐츠와 패딩을 포함한 영역의 너비와 높이, 스크롤바X
scrollWidth와 scrollHeight	스크롤바 포함 영역의 너비와 높이
scrollLeft와 scrollTop	스크롤바가 움직임일떄 가려지게 되는 요소 콘텐츠의 너비와 높이
document.documentElement.clientWidth/clientHeight	사용자 눈에 보이는 문서의 너비와 높이
let scrollHeight = Math.max(	//스크롤에 의해 가려진 영역을 포함한 문서 전체의 너비와 높이
  document.body.scrollHeight, document.documentElement.scrollHeight,
  document.body.offsetHeight, document.documentElement.offsetHeight,
  document.body.clientHeight, document.documentElement.clientHeight
);
window.pageYOffset/pageXOffset.	현재 스크롤 정보 읽기:
window.scrollTo(pageX,pageY) 	스크롤 상태 변경 절대 좌표
window.scrollBy(x,y)		현재 스크롤 상태를 기준으로 상대적으로 스크롤 정보 변경
elem.scrollIntoView(top)		elem이 눈에 보이도록 스크롤 상태 변경
			(인수에 따라 창 최상단, 최하단에 해당 요소가 노출되도록 처리)
elem.getBoundingClientRect( )	창 기준	position:fixed와 사용하면 좋음
elem.getBoundingClientRect( )	문서 기준 position:absolute와 사용하면 좋음




브라우저 인터페이스
alert
alert(message);
message가 담긴 얼럿 창을 보여줌

prompt
result = prompt(질문, 초기값[선택값]);
‘확인’ 버튼을 눌렀을 땐 사용자가 입력한 값을 반환해주고,
‘취소’ 버튼을 눌렀을 땐 null을 반환

confirm
result = confirm(질문)
확인 true 그외 false






	
